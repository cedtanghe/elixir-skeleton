// Examples: https://github.com/jshint/jshint/blob/master/examples/.jshintrc
// Documentation: http://www.jshint.com/docs/
// In Sublime: https://github.com/victorporof/Sublime-JSHint#using-your-own-jshintrc-options
// In WebStorm: http://www.jetbrains.com/webstorm/webhelp/jshint.html

{
	// Enforcing
	"bitwise"       : false,    // true: Prohibit bitwise operators (&, |, ^, etc.)
	"camelcase"     : true,     // true: Identifiers must be in camelCase
	"curly"         : true,     // true: Require {} for every new block or scope
	"eqeqeq"        : true,     // true: Require triple equals (===) for comparison
	"forin"         : false,    // true: Require filtering for..in loops with obj.hasOwnProperty()
	"freeze"        : true,     // true: This options prohibits overwriting prototypes of native objects such as Array, Date and so on.
	"funcscope"     : true,     // true: Tolerate defining variables inside control statements
	"globals"       : {         // additional predefined global variables
		"constants": true
	},
	"globalstrict"  : true,    // true: Allow global "use strict" (also enables 'strict')
	"immed"         : true,     // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
	"indent"        : 4,        // {int} Number of spaces to use for indentation
	"latedef"       : true,     // true: Require variables/functions to be defined before being used
	"maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
	"maxdepth"      : 6,        // {int} Max depth of nested blocks (within functions)
	"maxerr"        : 100,      // {int} Maximum error before stopping
	"maxlen"        : false,    // {int} Max number of characters per line
	"maxparams"     : false,    // {int} Max number of formal params allowed per function
	"maxstatements" : false,    // {int} Max number statements per function
	"newcap"        : true,     // true: Require capitalization of all constructor functions e.g. `new F()`
	"noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
	"noempty"       : true,     // true: Prohibit use of empty blocks
	"nonbsp"        : true,     // true: Prohibit use of non-breaking whitespace characters
	"nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
	"notypeof"      : false,    // true: This option suppresses warnings about invalid typeof operator values.
	"quotmark"      : false,    // Quotation mark consistency.
	"shadow"        : "inner",  // Suppresses warnings about variable shadowing.
	"singleGroups"  : false,    // Prohibits the use of the grouping operator for single-expression statements.
	"undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
	"unused"        : false,    // true: Require all defined variables be used

	// Relaxing
	"asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
	"boss"          : false,     // true: Tolerate assignments where comparisons would be expected
	"debug"         : true,      // true: Allow debugger statements e.g. browser breakpoints.
	"eqnull"        : false,     // true: Tolerate use of `== null`
	"esnext"        : false,     // true: This option tells JSHint that your code uses ECMAScript 6 specific syntax.
	"evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
	"expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
	"iterator"      : false,     // true: Tolerate using the `__iterator__` property
	"lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
	"laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings
	"laxcomma"      : false,     // true: Tolerate comma-first style coding
	"loopfunc"      : false,     // true: Tolerate functions being defined in loops
	"moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
	"multistr"      : false,     // true: Tolerate multi-line strings
	"noyield"       : false,     // Suppresses warnings about generator functions with no yield statement in them.
	"plusplus"      : false,     // true: Prohibit use of `++` & `--`
	"proto"         : false,     // true: Tolerate using the `__proto__` property
	"scripturl"     : false,     // true: Tolerate script-targeted URLs
	"strict"        : false,     // true: Requires all functions run in ES5 Strict Mode
	"sub"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
	"supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
	"validthis"     : false,     // true: Tolerate using this in a non-constructor function
	"withstmt"      : false,     // true: Suppresses warnings about the use of the with statement.

	// Environments
	"browser"       : true,     // Web Browser (window, document, etc)
	"couch"         : false,    // CouchDB
	"devel"         : true,     // Development/debugging (alert, confirm, etc)
	"dojo"          : false,    // Dojo Toolkit
	"jquery"        : true,    // jQuery
	"mocha"         : false,    // Mocha
	"mootools"      : false,    // MooTools
	"node"          : false,     // Node.js
	"nonstandard"   : false,     // Widely adopted globals (escape, unescape, etc)
	"phantom"       : false,    // PhantomJS
	"prototypejs"   : false,    // Prototype and Scriptaculous
	"rhino"         : false,    // Rhino
	"worker"        : false,    // Web Workers
	"wsh"           : false,    // Windows Scripting Host
	"yui"           : false     // Yahoo User Interface
}